#!/bin/bash

if [[ "$1" == "--help" ]]
then
    echo "Detects some settings, and retains others for future compilations."
    echo
    echo "Available options:"
    echo "  --python <PATH>            Name or path to Python"
    echo "  --include-dir <PATH>       Overall header location [/usr/include]"
    echo "  --gtk-headers <PATH>       Full path to GTK+ headers"
    echo "                               [\$INCLUDE/gtk-3.0]"
    echo "  --cairo-headers <PATH>     Path to Cairo headers [\$INCLUDE]"
    echo "  --minigrace-headers <PATH> Path to Minigrace headers [../minigrace]"
    echo "  --brew                     Set up defaults for 'brew' on OS X"
    echo "  --null                     Create empty Makefile.conf so that"
    echo "                             make variables can be used for options."
    echo
    echo "Configure choices are saved in Makefile.conf"
elif [[ "$1" == "--null" ]]
then
    echo "# Empty Makefile.conf generated on $(date)" > Makefile.conf
    exit 0
fi
BREW=
PYTHON_VERSION=
INCLUDE_DIR=/usr/include
capture=
for x in "$@"
do
    if [[ "$capture" == "python" ]]
    then
        PYTHON=$x
        capture=
    elif [[ "$capture" == "include" ]]
    then
        INCLUDE_DIR=$x
        capture=
    fi
    if [[ "$x" == "--python" ]]
    then
        capture=python
    elif [[ "$x" == "--include-dir" ]]
    then
        capture=include
    elif [[ "$x" == "--brew" ]]
    then
        if ! brew --version >/dev/null 2>&1
        then
            echo "brew not found. Ensure that it is somewhere in your PATH."
            exit 1
        fi
        BREW=y
        INCLUDE_DIR=/usr/local
    fi
done
if ! [ "$PYTHON" ] && ! python3 --version 2>/dev/null
then
    echo -n "python3 not found, looking for a suitable python... "
    for x in "" 3 3.2 3.1 2.7 2.6
    do
        if python$x --version 2>&1 | grep -qE 'Python (3|2.[67])'
        then
            PYTHON_VERSION=$x
            echo "found python$x."
            break
        fi
    done
    if ! [ "$PYTHON_VERSION" ]
    then
        echo "not found."
        echo
        echo "A suitable python executable was not found in your PATH. Pass"
        echo "the name or path to Python 2.6 or newer to --python."
        exit 1
    fi
fi
if [ "$PYTHON" ]
then
    if ! $PYTHON --version 2>&1 | grep -qE 'Python (3|2.[67])'
    then
        echo "The provided path to python, $PYTHON, does not point to Python 3,"
        echo "2.6, or 2.7."
        exit 1
    fi
fi
if [ "$BREW" ]
then
    if ! ( pkg-config --exists gtk+-3.0 && pkg-config --exists cairo )
    then
        export PKG_CONFIG_PATH=`brew --prefix cairo`/lib/pkgconfig:/opt/X11/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/X11/lib/pkgconfig
        SET_PKGCONFIG=y
    fi
fi
GTK_VERSION=3.0
echo -n "Looking for GTK+... "
if ! pkg-config --exists gtk+-$GTK_VERSION
then
    if pkg-config --exists gtk+-2.0
    then
        GTK_VERSION=2.0
        echo "found GTK+ 2."
    else
        echo "not found."
        echo
        echo "configure could not find GTK+ using pkg-config. You may need to"
        echo "install GTK+, preferably GTK+ 3, or else set the PKG_CONFIG_PATH"
        echo "variable in your environment. <doc/platform> may have suggestions"
        echo "on how to find the correct path."
        exit 1
    fi
else
    echo "found gtk+-$GTK_VERSION."
fi

HEADER_LOCATION=$INCLUDE_DIR/gtk-$GTK_VERSION
CAIRO_INCLUDE_DIR=$INCLUDE_DIR
MINIGRACE_HEADERS=../minigrace

if [ "$BREW" ]
then
    CAIRO_INCLUDE_DIR="`brew --prefix cairo`/include"
fi

capture=
for x in "$@"
do
    if [[ "$capture" == "header" ]]
    then
        HEADER_LOCATION=$x
        capture=
    elif [[ "$capture" == "cairo" ]]
    then
        HEADER_LOCATION=$x
        capture=
    elif [[ "$capture" == "minigrace" ]]
    then
        MINIGRACE_HEADERS=$x
        capture=
    fi
    if [[ "$x" == "--gtk-headers" ]]
    then
        capture=header
    elif [[ "$x" == "--cairo-headers" ]]
    then
        capture=cairo
    elif [[ "$x" == "--minigrace-headers" ]]
    then
        capture=minigrace
    fi
done

echo -n "Checking GTK+ header location... "
if ! [ -e "$HEADER_LOCATION" ]
then
    echo "invalid."
    echo
    echo "GTK+ headers not found. Specify the header location (including the"
    echo "gtk-$GTK_VERSION part) using --gtk-headers /path/to/headers."
    exit 1
else
    echo "OK."
fi

echo -n "Checking Cairo header location... "
if ! [ -e "$CAIRO_INCLUDE_DIR/cairo/cairo.h" ]
then
    echo "invalid."
    echo
    echo "Cairo headers not found. Specify the header location (not including"
    echo "cairo/) using --cairo-headers /usr/include. <doc/platform> may have"
    echo "suggestions on how to find the correct path."
    exit 1
else
    echo "OK."
fi

echo -n "Checking Minigrace header location... "
if ! [ -e "$MINIGRACE_HEADERS/gracelib.h" ]
then
    echo "invalid."
    echo
    echo "Minigrace headers not found. Use --minigrace-headers /path/here to"
    echo "specify their location."
    exit 1
else
    echo "OK."
fi


# Clear out default values
[[ "$HEADER_LOCATION" = "$INCLUDE_DIR/gtk-$GTK_VERSION" ]] && HEADER_LOCATION=
[[ "$GTK_VERSION" = "3.0" ]] && GTK_VERSION=
[[ "$CAIRO_INCLUDE_DIR" = "$INCLUDE_DIR" ]] && CAIRO_INCLUDE_DIR=
[[ "$MINIGRACE_HEADERS" = "../minigrace" ]] && MINIGRACE_HEADERS=
[[ "$INCLUDE_DIR" = "/usr/include" ]] && INCLUDE_DIR=

echo "# Generated by configure at $(date)" > Makefile.conf
[ "$PYTHON_VERSION" ] && echo "PYTHON_VERSION=$PYTHON_VERSION" >> Makefile.conf
[ "$PYTHON" ] && echo "PYTHON=$PYTHON" >> Makefile.conf
[ "$INCLUDE_DIR" ] && echo "INCLUDE_DIR=$INCLUDE_DIR" >> Makefile.conf
[ "$GTK_VERSION" ] && echo "GTK_VERSION=$GTK_VERSION" >> Makefile.conf
[ "$HEADER_LOCATION" ] && echo "HEADER_LOCATION=$HEADER_LOCATION" >> Makefile.conf
[ "$CAIRO_INCLUDE_DIR" ] && echo "CAIRO_INCLUDE_DIR=$CAIRO_INCLUDE_DIR" >> Makefile.conf
[ "$MINIGRACE_HEADERS" ] && echo "MINIGRACE_HEADERS=$MINIGRACE_HEADERS" >> Makefile.conf
echo "# Done." >> Makefile.conf
if ! [ "$HEADER_LOCATION$GTK_VERSION$CAIRO_INCLUDE_DIR$MINIGRACE_HEADERS$INCLUDE_DIR$PYTHON" ]
then
    echo "All default options valid - created empty Makefile.conf."
else
    cat Makefile.conf
fi
if [ "$SET_PKGCONFIG" ]
then
    echo
    echo "configure needed to set PKG_CONFIG_PATH to find installed packages."
    echo "You will need to set this variable in your environment to build:"
    echo "    export PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
    echo "This variable will need to be set in your environment for every"
    echo "compilation of these libraries, but not when using the modules."
fi
